" .vimrc
" David Rainsford - david@rainsford.org
" http://www.rainsford.org

" use vim settings rather than vi settings
" this must be first, because it changes other options as a side effect
set nocompatible

runtime bundle/vim-pathogen/autoload/pathogen.vim
call pathogen#infect()
call pathogen#helptags()

" GENERAL SETUP
set nobackup
"set colorcolumn=+1
set history=50
set number
set nopaste
set pastetoggle=<F2>
set ruler
set rulerformat=%20(%2*%<%f%=\ %m%r\ %3l\ %c\ %p%%%)
set scrolloff=5 " Keep a little buffer at the edges
set showcmd
set textwidth=80
set visualbell t_vb= " no beeps nor flashes

if has("persistent_undo")
    set undodir=~/.vim/undodir
    set undofile
endif

" BEHAVIOUR
set backspace=indent,eol,start " backspace over everything
set splitbelow
set splitright

" SEARCH
set hlsearch
set ignorecase
set incsearch
set smartcase " ignorecase unless search contains an uppercase letter

" TABBING
set expandtab     " uses spaces instead of tabs
set listchars=tab:▸\ ,eol:¬
set shiftround    " indent to nearest tabstops
set shiftwidth=2  " amount of whitespace to add or remove using > and <
set smarttab      " backspace tabs where appropriate even though they are spaces
set softtabstop=2 " allows us to backspace over 2 spaces at a time
set tabstop=2     " specifies the width of a tab character

if has("autocmd")
    " Enable file type detection.
    " Use the default filetype settings, so that mail gets 'tw' set to 72,
    " 'cindent' is on in C files, etc.
    " Also load indent files, to automatically do language-dependent indenting.
    filetype plugin indent on

    " Delete autocommands that have already been set
    " I found that if I don't have this then repeatedly saving / reloading
    " gets slower and slower because it is doing all the autocmd stuff
    " several times
    au!

    " Set tab to 2 spaces
    au FileType html,css,xml setlocal ts=2 sts=2 sw=2

    " Maps Ctrl-l to a PHP syntax check
    au FileType php noremap <C-L> :!/usr/bin/env php -l %<CR>

    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    " Also don't do it when the mark is in the first line, that is the default
    " position when opening a file.
    au BufReadPost *
                \ if line("'\"") > 1 && line("'\"") <= line("$") |
                \ exe "normal! g`\"" |
                \ endif
    
    au WinEnter * setlocal cursorline
    au WinLeave * setlocal nocursorline

    au bufwritepost .vimrc source ~/.vimrc                                                 
    au bufwritepost .vimrc call Pl#Load()
else
    set autoindent " always set autoindenting on
endif

" shortcuts
cmap w!! %!sudo tee > /dev/null %
cmap W   w
cmap Wq  wq
cmap Q   q

map Y y$
noremap H ^
noremap L $

let mapleader = ","

map <leader>m :bprev<CR>
map <leader>. :bnext<CR>

nmap     <silent> <leader>d   :NERDTreeToggle<CR>
nmap     <silent> <leader>l   :set list!<CR>
nmap     <silent> <leader>n   :set nu!<CR>
nmap              <leader>v   :e $MYVIMRC<CR> " easy .vimrc editing
nmap     <silent> <leader>w   :set wrap!<CR>
nnoremap <silent> <leader>,   :call NERDComment(0, "toggle")<CR>
vnoremap <silent> <leader>,    <ESC>:call NERDComment(1, "toggle")<CR>

nmap <F8> :TagbarOpenAutoClose<CR>

" Move visual selection around
vmap <C-h> x<BS>P`[v`]
vmap <C-j> xp`[V`]
vmap <C-k> xkP`[V`]
vmap <C-l> x<Space>P`[v`]

" Smart way to move windows
nmap <C-h> <C-W>h
nmap <C-j> <C-W>j
nmap <C-k> <C-W>k
nmap <C-l> <C-W>l

if bufwinnr(1)
    map + :res +1<CR>
    map - :res -1<CR>
    map <leader>+ :vertical:res +1<CR>
    map <leader>- :vertical:res -1<CR>
endif

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
    command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
                \ | wincmd p | diffthis
endif

" plugins

let g:NERDTreeQuitOnOpen = 1

syntax enable
set t_Co=16
set background=dark
colorscheme solarized

" Supertab completion should use omni-completion
let g:supertabdefaultcompletiontype = "context"
let g:Powerline_colorscheme = 'dangerous'
let g:Powerline_symbols = 'fancy'
set laststatus=2
